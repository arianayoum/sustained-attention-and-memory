from __future__ import divisionimport numpy as npimport pandas as pdfrom pandas import Series, DataFrameimport time, random, os, csvfrom random import shuffle, samplefrom psychopy import visual, gui, core, data, tools, event, loggingfrom psychopy.tools.filetools import fromFile, toFilefrom datetime import datetimefrom scipy.stats import normfrom psychopy.preferences import prefs# experiment name expName = 'PC'# Prompt pop-upexpInfo = {'participant ID': '', 'session': '001'}# subject infodlg = gui.DlgFromDict(dictionary=expInfo, title=expName) if not dlg.OK:    core.quit() # Get the filename based on participant numberfileName = expInfo['participant ID']# Set directorydir = os.path.dirname(os.path.abspath("PSPC1_Mar2019.py"))os.chdir(dir)# Make folderif not os.path.exists(fileName):    os.makedirs(fileName)# Make files os.chdir(os.path.join(dir, fileName))f1 = open(fileName+'_PCencoding.csv', 'a+') #a simple text file with 'comma-separated-values' and 'w' is for writing f1.write('subject, word, response')f2 = open(fileName+'_PCinclusion.csv', 'a+') f2.write('subject, task, stem, word, response, accuracy, RT')f3 = open(fileName+'_PCexclusion.csv', 'a+') f3.write('subject, task, stem, word, response, accuracy, RT')f4 = open(fileName+'_PSencoding.csv', 'w')f4.write('subject, word, response')# Create a windowmywin = visual.Window([1920,1080], allowGUI=False, monitor='testMonitor', units='deg', fullscr=True)mywin.recordFrameIntervals = Truemywin.refreshThreshold = 1/60 + 0.004# Practice stimulios.chdir(os.path.join(dir,'Stim'))prac = pd.read_csv("example.csv")prac_encoding = prac["Sentence"]prac_stem = prac["Stem"]prac_PS = prac["Syn"]# Messagesmessage1 = visual.TextStim(mywin, pos=[0,+3],     text=u'First read the sentence out loud. \nThen press 1 if you do not know this word at all, press 2 if you kind of know this word, and press 3 if you know this word well.',     height=1, alignHoriz='center', wrapWidth=30)message2 = visual.TextStim(mywin, pos=[0,-3], text='Hit any key to begin.', height=1)# Visualsos.chdir(os.path.join(dir,'Keys'))one = visual.ImageStim(mywin, image = 'one.png', pos=[-0.3,-0.5], units='norm', size = (0.2,0.3))two = visual.ImageStim(mywin, image = 'two.png', pos=[0,-0.5], units='norm', size = (0.2,0.3))three = visual.ImageStim(mywin, image = 'three.png', pos=[0.3,-0.5], units='norm', size = (0.2,0.3))onepress = visual.ImageStim(mywin, image = 'onepress.png', pos=[-0.3,-0.5], units='norm', size = (0.2,0.3))twopress = visual.ImageStim(mywin, image = 'twopress.png', pos=[0,-0.5], units='norm', size = (0.2,0.3))threepress = visual.ImageStim(mywin, image = 'threepress.png', pos=[0.3,-0.5], units='norm', size = (0.2,0.3))########################################################################################################################################### PC Stim Setup ###############################################################################################################################################os.chdir(os.path.join(dir,'Stim'))files = (['A','B'], ['B','C'], ['C','D'], ['D','E'], ['E', 'F'], ['F', 'G'], ['G', 'H'], ['H','A'])x = int(expInfo['participant ID'])if x%8 == 0:    set = 7else:    set = (x%8)-1bin1 = files[set][0]bin2 = files[set][1]PC1 = pd.read_csv("Bin" + bin1 + ".csv")PC1 = PC1.sample(frac=1).reset_index(drop=True)# Block 1 BuffersPC1start = pd.read_csv("PCbuff1start.csv")PC1end = pd.read_csv("PCbuff1end.csv")# PC Block 1 SetupPC1stim = pd.concat([PC1start, PC1, PC1end], ignore_index=True)PC1encoding = PC1stim["Sentence"]# Block 1 Retrieval SetupInc1_stems = PC1.Stem[0:10]Inc1_words = PC1.Word[0:10]Exc1_stems = PC1.Stem[10:20]Exc1_words = PC1.Word[10:20]PC1stems =  PC1["Stem"]PC1words = PC1["Word"]# Block 2 BuffersPC2start = pd.read_csv("PCbuff2start.csv")PC2end = pd.read_csv("PCbuff2end.csv")# PC Block 2 SetupPC2 = pd.read_csv("Bin" + bin2 + ".csv")PC2 = PC2.sample(frac=1).reset_index(drop=True)PC2stim = pd.concat([PC2start, PC2, PC2end], ignore_index=True)PC2encoding = PC2stim["Sentence"]# Block 2 Retrieval SetupInc2_stems = PC2.Stem[0:10]Inc2_words = PC2.Word[0:10]Exc2_stems = PC2.Stem[10:20]Exc2_words = PC2.Word[10:20]PC2stems =  PC2["Stem"]PC2words = PC2["Word"]sans = ['Helvetica']fixation = visual.GratingStim(mywin, color=-1, colorSpace='rgb', tex=None, mask='cross', size=0.6)############################################################################################################################################ PC Encoding  ###############################################################################################################################################os.chdir(os.path.join(dir,'Instructions'))for i in np.arange(1,9):    inst = visual.ImageStim(mywin, image='Slide'+str(i)+'.png', pos=[0,0],units='norm', size=2)    inst.draw()    mywin.flip()    core.wait(0.5)    event.waitKeys()# practicemessage1.draw()message2.draw()fixation.draw()mywin.flip()# key pressevent.waitKeys()expClock = core.Clock()for sentence in prac_encoding:    message = visual.TextStim(mywin, text=sentence, alignHoriz='center', alignVert='center', wrapWidth=40, height=2)    message.draw()    mywin.flip()    core.wait(3)    message.draw()    one.draw()    two.draw()    three.draw()    mywin.flip()    trialClock = core.Clock()    allKeys=event.waitKeys(keyList=["1","2","3",'q'],timeStamped=trialClock)    if allKeys!= None:        for thisKey in allKeys:            if thisKey[0]=='1':                message.draw()                two.draw()                three.draw()                onepress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0]=='2':                message.draw()                one.draw()                three.draw()                twopress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0]=='3':                one.draw()                two.draw()                threepress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0] in ['q', 'escape']:                win.close()                core.quit() #abort experiment        fixation.draw()        mywin.flip()        core.wait(1)feedback1 = visual.TextStim(mywin, text='Great Work! Do you have any questions?')feedback1.draw()message2.draw()mywin.flip()event.waitKeys() # wait for participant to respond# display instructions and waitmessage1.draw()message2.draw()fixation.draw()mywin.flip()# key pressevent.waitKeys()expClock = core.Clock()###################################################################################################################################### PC Encoding Block 1  ############################################################################################################################################# draw stimulifor sentence in PC1encoding:    message = visual.TextStim(mywin, text=sentence, alignHoriz='center', alignVert='center', wrapWidth=40, height=2)    message.draw()    mywin.flip()    core.wait(3)    message.draw()    one.draw()    two.draw()    three.draw()    mywin.flip()    trialClock = core.Clock()    # clear event space    event.clearEvents()    allKeys=event.waitKeys(keyList=["1","2","3",'q'],timeStamped=trialClock)    if allKeys!= None:        for thisKey in allKeys:            i = (PC1stim.Sentence[PC1stim.Sentence == str(sentence)].index.tolist())[0]            if thisKey[0]=='1':                response = 1                message.draw()                two.draw()                three.draw()                onepress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0]=='2':                response = 2                message.draw()                one.draw()                three.draw()                twopress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0]=='3':                response = 3                one.draw()                two.draw()                threepress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0] in ['q', 'escape']:                win.close()                core.quit() #abort experiment        fixation.draw()        mywin.flip()        core.wait(1)    event.clearEvents()    # add response to output    f1.write('\n %s, %s, %i' %(expInfo['participant ID'], PC1stim.Word[i], response))    #buffer    core.wait(0.1)feedback1 = visual.TextStim(mywin, pos=[0,0],    text='Great Work!', height = 2)feedback1.draw()message2.draw()mywin.flip()event.waitKeys() #wait for participant to respond###################################################################################################################################### PC Block 1 Inclusion ############################################################################################################################################## display instructionsos.chdir(os.path.join(dir,'Instructions'))for i in np.arange(9,17):    inst = visual.ImageStim(mywin, image='Slide'+str(i)+'.png', pos=[0,0],units='norm', size=2)    inst.draw()    mywin.flip()    core.wait(0.5)    event.waitKeys()# PracticequitKeys = ['escape', 'esc']keyboard = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z', 'backspace', 'return']answer = ''expClock = core.Clock()for s in prac_stem:    message = visual.TextStim(mywin, text=s+'___', height=3)    message.draw()    mywin.flip()    trialClock = core.Clock()    # clear event space    event.clearEvents()    keys = event.getKeys(timeStamped = trialClock)    answer = s    exit = 0    while exit != 1:        keys=event.waitKeys(maxWait=15, keyList=keyboard, timeStamped=trialClock)        if keys == None:            exit = 1            answer = 999            break        elif (keys[0][0] == 'backspace') & (len(answer)>1):            answer = answer[:-1]        elif keys[0][0] == 'return':            exit = 1            break        else:            answer += keys[0][0].upper()        ansMessage = visual.TextStim(mywin, text=answer, height=3)        ansMessage.draw()        mywin.flip()    fixation.draw()    mywin.flip()    core.wait(1)    event.clearEvents()feedback1.draw()message2.draw()mywin.flip()event.waitKeys() #wait for participant to respond# display instructions and waitinstructions = visual.TextStim(mywin, pos=[0,+3], text='Complete the three letters with a word you just saw and say your answer out loud.', height=1)instructions.draw()message2.draw()fixation.draw()mywin.flip()# key pressevent.waitKeys()expClock = core.Clock()# draw stimuliquitKeys = ['escape', 'esc']keyboard = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z', 'backspace', 'return']answer = ''for s in Inc1_stems:    i = (PC1.Stem[PC1.Stem == str(s)].index.tolist())[0]    message = visual.TextStim(mywin, text=s+'___', height=3)    message.draw()    mywin.flip()    trialClock = core.Clock()    # clear event space    event.clearEvents()    keys = event.getKeys(timeStamped = trialClock)    answer = s    exit = 0    while exit != 1:        keys=event.waitKeys(maxWait=15, keyList=keyboard, timeStamped=trialClock)        if keys == None:            answer = 999            accuracy = 0            rt = 999            exit = 1            break        elif (keys[0][0] == 'backspace') & (len(answer)>1):            answer = answer[:-1]        elif keys[0][0] == 'return':            exit = 1            rt = keys[0][1]            break        else:            answer += keys[0][0].upper()        # calculate accuracy        if answer == PC1.Word[i]:            accuracy = 1        else:             accuracy = 0        ansMessage = visual.TextStim(mywin, text=answer, height=3)        ansMessage.draw()        mywin.flip()    fixation.draw()    mywin.flip()    core.wait(1)    event.clearEvents()    # add response to output    f2.write('\n %s, %s, %s, %s, %s, %i, %f' %(expInfo['participant ID'], 'Inclusion', s, PC1.Word[i], answer, accuracy, rt))    #buffer    core.wait(0.1)feedback1 = visual.TextStim(mywin, pos=[0,0],    text='Great Work!', height = 2)message2.draw()feedback1.draw()mywin.flip()event.waitKeys() #wait for participant to respond####################################################################################################################################### PC Block 1 Exclusion ############################################################################################################################################os.chdir(os.path.join(dir,'Instructions'))for i in np.arange(17,25):    inst = visual.ImageStim(mywin, image='Slide'+str(i)+'.png', pos=[0,0],units='norm', size=2)    inst.draw()    mywin.flip()    core.wait(0.5)    event.waitKeys()# Practice expClock = core.Clock()trialClock = core.Clock()quitKeys = ['escape', 'esc']keyboard = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z', 'backspace', 'return']answer = ''for s in prac_stem:    message = visual.TextStim(mywin, text=s+'___', height=3)    message.draw()    mywin.flip()    # clear event space    event.clearEvents()    keys = event.getKeys(timeStamped = trialClock)    answer = s    exit = 0    while exit != 1:        keys=event.waitKeys(keyList=keyboard, timeStamped=trialClock)        if keys == None:            answer = 999            accuracy = 999            rt = 999            exit = 1            break        elif (keys[0][0] == 'backspace') & (len(answer)>1):            answer = answer[:-1]        elif keys[0][0] == 'return':            exit =1            break        else:            answer += keys[0][0].upper()        ansMessage = visual.TextStim(mywin, text=answer, height=3)        ansMessage.draw()        mywin.flip()    fixation.draw()    mywin.flip()    core.wait(1)    event.clearEvents()feedback1.draw()message2.draw()mywin.flip()event.waitKeys() #wait for participant to respond# display instructions and waitinstructions = visual.TextStim(mywin, pos=[0,+3], text='Complete the three letters with a word you have not seen earlier, in the context of this study, and say your answer out loud.', height=1)instructions.draw()message2.draw()fixation.draw()mywin.flip()# key pressevent.waitKeys()expClock = core.Clock()trialClock = core.Clock()# draw stimuliquitKeys = ['escape', 'esc']keyboard = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z', 'backspace', 'return']answer = ''for s in Exc1_stems:    i = (PC1.Stem[PC1.Stem == str(s)].index.tolist())[0]    message = visual.TextStim(mywin, text=s+'___', height=3)    message.draw()    mywin.flip()    trialClock = core.Clock()    # clear event space    event.clearEvents()    keys = event.getKeys(timeStamped = trialClock)    answer = s    exit = 0    while exit != 1:        keys=event.waitKeys(maxWait=15, keyList=keyboard, timeStamped=trialClock)        if keys == None:            answer = 999            rt = 999            accuracy = 999            exit = 1            break        elif (keys[0][0] == 'backspace') & (len(answer)>1):            answer = answer[:-1]        elif keys[0][0] == 'return':            exit = 1            rt = keys[0][1]            break        else:            answer += keys[0][0].upper()        # calculate accuracy        if answer != PC1.Word[i]:            accuracy = 1        else:             accuracy = 0        ansMessage = visual.TextStim(mywin, text=answer, height=3)        ansMessage.draw()        mywin.flip()    fixation.draw()    mywin.flip()    core.wait(1)    event.clearEvents()    # add response to output    f3.write('\n %s, %s, %s, %s, %s, %i, %f' %(expInfo['participant ID'], 'Exclusion', s, PC1.Word[i], answer, accuracy, rt))    #buffer    core.wait(0.1)#give some on screen feedbackfeedback1 = visual.TextStim(mywin, pos=[0,0],    text='Great Work!', height = 2)feedback1.draw()message2.draw()mywin.flip()event.waitKeys() #wait for participant to respond###################################################################################################################################### PC Encoding Block 2  ############################################################################################################################################# display instructions and waitmessage1.draw()message2.draw()fixation.draw()mywin.flip()# key pressevent.waitKeys()expClock = core.Clock()# draw stimulifor sentence in PC2encoding:    message = visual.TextStim(mywin, text=sentence, alignHoriz='center', alignVert='center', wrapWidth=40, height=2)    message.draw()    mywin.flip()    core.wait(3)    message.draw()    one.draw()    two.draw()    three.draw()    mywin.flip()    trialClock = core.Clock()    # clear event space    event.clearEvents()    allKeys=event.waitKeys(keyList=["1","2","3",'q'],timeStamped=trialClock)    if allKeys!= None:        for thisKey in allKeys:            i = (PC2stim.Sentence[PC2stim.Sentence == str(sentence)].index.tolist())[0]            if thisKey[0]=='1':                response = 1                message.draw()                two.draw()                three.draw()                onepress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0]=='2':                response = 2                message.draw()                one.draw()                three.draw()                twopress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0]=='3':                response = 3                one.draw()                two.draw()                threepress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0] in ['q', 'escape']:                win.close()                core.quit() #abort experiment        fixation.draw()        mywin.flip()        core.wait(1)    event.clearEvents()    # add response to output    f1.write('\n %s, %s, %i' %(expInfo['participant ID'], PC2stim.Word[i], response))    #buffer    core.wait(0.1)# data outputf1.close()feedback1 = visual.TextStim(mywin, pos=[0,0],    text='Great Work!', height = 2)feedback1.draw()message2.draw()mywin.flip()event.waitKeys() #wait for participant to respond##################################################################################################################################### PC Block 2 Inclusion ############################################################################################################################################### display instructions and waitinstructions = visual.TextStim(mywin, pos=[0,+3], text='Complete the three letters with a word you just saw and say your answer out loud.', height=1)instructions.draw()message2.draw()fixation.draw()mywin.flip()# key pressevent.waitKeys()expClock = core.Clock()# draw stimuliquitKeys = ['escape', 'esc']keyboard = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z', 'backspace', 'return']answer = ''for s in Inc2_stems:    i = (PC2.Stem[PC2.Stem == str(s)].index.tolist())[0]    message = visual.TextStim(mywin, text=s+'___', height=3)    message.draw()    mywin.flip()    trialClock = core.Clock()    # clear event space    event.clearEvents()    keys = event.getKeys(timeStamped = trialClock)    answer = s    exit = 0    while exit != 1:        keys=event.waitKeys(maxWait=15, keyList=keyboard, timeStamped=trialClock)        if keys == None:            answer = 999            accuracy = 0            rt = 999            exit = 1            break        elif (keys[0][0] == 'backspace') & (len(answer)>1):            answer = answer[:-1]        elif keys[0][0] == 'return':            exit = 1            rt = keys[0][1]            break        else:            answer += keys[0][0].upper()        # calculate accuracy        if answer == PC2.Word[i]:            accuracy = 1        else:             accuracy = 0        ansMessage = visual.TextStim(mywin, text=answer, height=3)        ansMessage.draw()        mywin.flip()    fixation.draw()    mywin.flip()    core.wait(1)    event.clearEvents()    # add response to output    f2.write('\n %s, %s, %s, %s, %s, %i, %f' %(expInfo['participant ID'], 'Inclusion', s, PC2.Word[i], answer, accuracy, rt))    #buffer    core.wait(0.1)# data outputf2.close()feedback1 = visual.TextStim(mywin, pos=[0,0],    text='Great Work!', height = 2)message2.draw()feedback1.draw()mywin.flip()event.waitKeys() #wait for participant to respond####################################################################################################################################### PC Block 2 Exclusion ############################################################################################################################################# display instructions and waitinstructions = visual.TextStim(mywin, pos=[0,+3], text='Complete the three letters with a word you have NOT seen earlier, in the context of this study, and say your answer out loud.', height=1)instructions.draw()message2.draw()fixation.draw()mywin.flip()# key pressevent.waitKeys()expClock = core.Clock()trialClock = core.Clock()# draw stimuliquitKeys = ['escape', 'esc']keyboard = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z', 'backspace', 'return']answer = ''for s in Exc2_stems:    i = (PC2.Stem[PC2.Stem == str(s)].index.tolist())[0]    message = visual.TextStim(mywin, text=s+'___', height=3)    message.draw()    mywin.flip()    trialClock = core.Clock()    # clear event space    event.clearEvents()    keys = event.getKeys(timeStamped = trialClock)    answer = s    exit = 0    while exit != 1:        keys=event.waitKeys(maxWait=15, keyList=keyboard, timeStamped=trialClock)        if keys == None:            answer = 999            accuracy = 999            rt = 999            exit = 1            break        elif (keys[0][0] == 'backspace') & (len(answer)>1):            answer = answer[:-1]        elif keys[0][0] == 'return':            exit = 1            rt = keys[0][1]            break        else:            answer += keys[0][0].upper()        # calculate accuracy        if answer != PC2.Word[i]:            accuracy = 1        else:             accuracy = 0        ansMessage = visual.TextStim(mywin, text=answer, height=3)        ansMessage.draw()        mywin.flip()    fixation.draw()    mywin.flip()    core.wait(1)    event.clearEvents()    # add response to output    f3.write('\n %s, %s, %s, %s, %s, %i, %f' %(expInfo['participant ID'], 'Exclusion', s, PC2.Word[i], answer, accuracy, rt))    #buffer    core.wait(0.1)# data outputf3.close()#give some on screen feedbackfeedback1 = visual.TextStim(mywin, pos=[0,0],    text='Great Work!', height = 2)feedback1.draw()message2.draw()mywin.flip()event.waitKeys() #wait for participant to respond######################################################################################################################################## PS Stimuli Setup ################################################################################################################################################ Practice stimulios.chdir(os.path.join(dir,'Stim'))prac = pd.read_csv("example.csv")prac_encoding = prac["Word"]prac_stem = prac["Stem"]prac_PS = prac["Syn"]# Setup stimulifiles = (['C','D','E', 'F', 'G', 'H'], ['D','E','F', 'G', 'H', 'A'], ['E','F','G', 'H', 'A', 'B'], ['F','G','H', 'A', 'B', 'C'], ['G','H','A', 'B', 'C', 'D'], ['H','A','B', 'C', 'D', 'E'], ['A','B','C', 'D', 'E', 'F'], ['B','C','D', 'E', 'F', 'G'])x = int(expInfo['participant ID'])if x%8 == 0:    set = 7else:    set = (x%8)-1bin1 = files[set][0] # block1 wordbin2 = files[set][1] # block1 lure bin3 = files[set][2] # block1 newbin4 = files[set][3] # block2 wordbin5 = files[set][4] # block2 lurebin6 = files[set][5] # block2 newBin1= pd.read_csv("Bin" + bin1 + ".csv")Bin1= Bin1.sample(frac=1).reset_index(drop=True)Bin2= pd.read_csv("Bin" + bin2 + ".csv")Bin2= Bin2.sample(frac=1).reset_index(drop=True)Bin3= pd.read_csv("Bin" + bin3 + ".csv")Bin3= Bin3.sample(frac=1).reset_index(drop=True)Bin4= pd.read_csv("Bin" + bin4 + ".csv")Bin4= Bin4.sample(frac=1).reset_index(drop=True)Bin5= pd.read_csv("Bin" + bin5 + ".csv")Bin5= Bin5.sample(frac=1).reset_index(drop=True)Bin6= pd.read_csv("Bin" + bin6 + ".csv")Bin6= Bin6.sample(frac=1).reset_index(drop=True)# BuffersPSstart = pd.read_csv("PSbuffstart.csv")PSend = pd.read_csv("PSbuffend.csv")stim = pd.concat([Bin1, Bin2, Bin4, Bin5], ignore_index=True)stim = stim.sample(frac=1).reset_index(drop=True)stim = pd.concat([PSstart, stim, PSend], ignore_index=True)encodingwords = stim["Sentence"]sans = ['Helvetica']fixation = visual.GratingStim(mywin, color=-1, colorSpace='rgb', tex=None, mask='cross', size=0.6)########################################################################################################################################### PS Encoding  ################################################################################################################################################# display instructions and waitmessage1.draw()message2.draw()fixation.draw()mywin.flip()# key pressevent.waitKeys()expClock = core.Clock()# draw stimulifor sentence in encodingwords:    message = visual.TextStim(mywin, text=sentence, alignHoriz='center', alignVert='center', wrapWidth=40, height=2)    message.draw()    mywin.flip()    core.wait(3)    message.draw()    one.draw()    two.draw()    three.draw()    mywin.flip()    trialClock = core.Clock()    # clear event space    event.clearEvents()    allKeys=event.waitKeys(keyList=["1","2","3",'q'],timeStamped=trialClock)    if allKeys!= None:        for thisKey in allKeys:            i = (stim.Sentence[stim.Sentence == str(sentence)].index.tolist())[0]            if thisKey[0]=='1':                response = 1                message.draw()                two.draw()                three.draw()                onepress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0]=='2':                response = 2                message.draw()                one.draw()                three.draw()                twopress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0]=='3':                response = 3                one.draw()                two.draw()                threepress.draw()                mywin.flip()                core.wait(0.1)            elif thisKey[0] in ['q', 'escape']:                win.close()                core.quit() #abort experiment        fixation.draw()        mywin.flip()        core.wait(1)    event.clearEvents()    # add response to output    f4.write('\n %s, %s, %i' %(expInfo['participant ID'], stim.Word[i], response))    #buffer    core.wait(0.1)# data outputf4.close()# give feedbackfeedback1.draw()message2.draw()mywin.flip()event.waitKeys() #wait for participant to respond